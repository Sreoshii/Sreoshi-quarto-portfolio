---
title: "Welcome to My Data Visualization Portfolio"
subtitle: "Hello! My nickname is SreoshiC. This is my Quarto data visualization portfolio showcasing my Python and matplotlib skills."
author: "SreoshiC"
date: today
format:
  html:
    theme: cosmo
    css: styles.css
execute:
  echo: true
  warning: false
  message: false
  eval: true
---

## About This Portfolio

This portfolio demonstrates how Quarto can seamlessly integrate Python code and visualizations into professional documents. The chart below is created using matplotlib and embedded directly into this document.

## Featured Project

### Simple Line Chart with Matplotlib
A clean line chart showing data trends over time:

```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# Generate sample time series data
dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='ME')
values = [100, 105, 98, 112, 108, 115, 120, 118, 125, 130, 135, 140]

# Create the line chart
plt.figure(figsize=(12, 6))
plt.plot(dates, values, marker='o', linewidth=2, markersize=6, color='#2E86AB')

# Customize the chart
plt.title('Monthly Data Trends - 2024', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Value', fontsize=12)
plt.grid(True, alpha=0.3)
plt.xticks(rotation=45)

# Add some styling
plt.tight_layout()
plt.show()

# Display summary statistics
print(f"Starting value: {values[0]}")
print(f"Ending value: {values[-1]}")
print(f"Total growth: {values[-1] - values[0]} ({((values[-1] - values[0]) / values[0] * 100):.1f}%)")
print(f"Average value: {np.mean(values):.1f}")
```

### Simple Bar Chart with Matplotlib
A clean bar chart showing categorical data:

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Sample data for bar chart
categories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']
values = [23, 45, 56, 78, 32]

# Create the bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(categories, values, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'])

# Customize the chart
plt.title('Sample Bar Chart - Category Comparison', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('Categories', fontsize=12)
plt.ylabel('Values', fontsize=12)
plt.xticks(rotation=45, ha='right')

# Add value labels on top of bars
for bar, value in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
             str(value), ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# Display summary statistics
print(f"Total values: {sum(values)}")
print(f"Average value: {np.mean(values):.1f}")
print(f"Maximum value: {max(values)} in {categories[values.index(max(values))]}")
print(f"Minimum value: {min(values)} in {categories[values.index(min(values))]}")
```

### Simple Scatter Plot with Matplotlib
A scatter plot showing random data points with different colors:

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Generate random data for scatter plot
np.random.seed(42)
n_points = 100
x = np.random.randn(n_points)
y = 2 * x + np.random.randn(n_points) * 0.5
colors = np.random.rand(n_points)
sizes = 100 * np.random.rand(n_points)

# Create the scatter plot
plt.figure(figsize=(10, 6))
scatter = plt.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis', edgecolors='black', linewidth=0.5)

# Customize the chart
plt.title('Random Data Points - Scatter Plot', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('X Values', fontsize=12)
plt.ylabel('Y Values', fontsize=12)
plt.grid(True, alpha=0.3)

# Add colorbar
cbar = plt.colorbar(scatter)
cbar.set_label('Color Value', fontsize=12)

# Add trend line
z = np.polyfit(x, y, 1)
p = np.poly1d(z)
plt.plot(x, p(x), "r--", alpha=0.8, linewidth=2, label=f'Trend line (y={z[0]:.2f}x+{z[1]:.2f})')
plt.legend()

plt.tight_layout()
plt.show()

# Display summary statistics
print(f"Number of data points: {n_points}")
print(f"X range: {x.min():.2f} to {x.max():.2f}")
print(f"Y range: {y.min():.2f} to {y.max():.2f}")
print(f"Correlation coefficient: {np.corrcoef(x, y)[0, 1]:.3f}")
print(f"Trend line equation: y = {z[0]:.3f}x + {z[1]:.3f}")
```

## Skills & Technologies

- **Data Analysis**: Python, pandas, numpy
- **Visualization**: Matplotlib, Seaborn
- **Tools**: Jupyter, Quarto, Git
- **Statistics**: Descriptive & Inferential Statistics



